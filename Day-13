135. Candy

STATEMENT
There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:
    Each child must have at least one candy.
    Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

SOLUTION
class Solution
{
public:
    int candy(vector<int> &ratings)
    {
        int n = ratings.size();
        vector<int> a(n, 1);
        int cnt = 0;
        if (n == 1)
        {
            return 1;
        }
        for (int i = 0; i < n; i++)
        {
            int mx;
            if (i == 0)
            {
                mx = a[i + 1];
                if(ratings[i]>ratings[i+1])
                {
                    a[i]=mx+1;
                    cnt+=a[i];
                }
                else
                {
                    cnt+=a[i];
                }
            }
            else if (i == n - 1)
            {
                mx = a[i - 1];
                if(ratings[i]>ratings[i-1])
                {
                    a[i]=mx+1;
                    cnt+=a[i];
                }
                else
                {
                    cnt+=a[i];
                }
            }
            else
            {
                mx = std::max(a[i - 1], a[i+1]);
                if(ratings[i]>ratings[i-1] && ratings[i]>ratings[i+1])
                {
                    a[i]=mx+1;
                    cnt+=a[i];
                }
                else if(ratings[i]>ratings[i-1])
                {
                    a[i]=a[i-1]+1;
                    cnt+=a[i];
                }
                else if(ratings[i]>ratings[i+1])
                {
                    a[i]=a[i+1]+1;
                    cnt+=a[i];
                }
                else
                {
                    cnt+=a[i];
                }
            }

            
        }

        for(int i=n-2;i>=0;i--)
        {
            if(ratings[i]>ratings[i+1])
            {
                int vl=a[i+1]+1;
                int dif=(std::max(vl, a[i]))-a[i];
                cnt+=dif;
                a[i]+=dif;
            }
        }
        return cnt;
    }
};
