1631. Path With Minimum Effort

STATEMENT
You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, 
where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), 
and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). 
You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.
A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

SOLUTION
class Solution
{
public:
    int minimumEffortPath(vector<vector<int>>& heights)
    {
        int rows=heights.size(), columns=heights[0].size();

        vector<vector<int>> cost(rows, vector<int>(columns, INT_MAX));
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<>> minHeap;
        minHeap.emplace(0, 0, 0);
        cost[0][0]=0;

        int directions[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

        while(!minHeap.empty())
        {
            auto [effort, x, y] = minHeap.top();
            minHeap.pop();
            if(effort > cost[x][y])
            {
                continue;
            }

            if(x==rows-1 && y==columns-1)
            {
                return effort;
            }

            for(auto& cell:directions)
            {
                int xx=x+cell[0], yy=y+cell[1];
                if(xx>=0 && xx<rows && yy>=0 && yy<columns)
                {
                    int newEffort=max(effort, abs(heights[x][y]-heights[xx][yy]));
                    if(newEffort<cost[xx][yy])
                    {
                        cost[xx][yy]=newEffort;
                        minHeap.emplace(newEffort, xx, yy);
                    }
                }
            }
        }

        return -1;

    }
};
